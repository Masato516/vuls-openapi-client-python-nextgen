# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conint

from typing import Optional

from openapiclient.models.role_get_role_detail_response_body import RoleGetRoleDetailResponseBody
from openapiclient.models.role_get_role_list_response_body import RoleGetRoleListResponseBody
from openapiclient.models.role_update_role_request_body import RoleUpdateRoleRequestBody
from openapiclient.models.role_update_role_response_body import RoleUpdateRoleResponseBody

from openapiclient.api_client import ApiClient
from openapiclient.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RoleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def role_delete_role(self, role_id : Annotated[StrictInt, Field(..., description="Role ID")], **kwargs) -> None:  # noqa: E501
        """deleteRole role  # noqa: E501

        role delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_delete_role(role_id, async_req=True)
        >>> result = thread.get()

        :param role_id: Role ID (required)
        :type role_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.role_delete_role_with_http_info(role_id, **kwargs)  # noqa: E501

    @validate_arguments
    def role_delete_role_with_http_info(self, role_id : Annotated[StrictInt, Field(..., description="Role ID")], **kwargs):  # noqa: E501
        """deleteRole role  # noqa: E501

        role delete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_delete_role_with_http_info(role_id, async_req=True)
        >>> result = thread.get()

        :param role_id: Role ID (required)
        :type role_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'role_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_delete_role" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['role_id']:
            _path_params['roleID'] = _params['role_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/role/{roleID}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def role_get_role_detail(self, role_id : Annotated[StrictInt, Field(..., description="Role ID")], **kwargs) -> RoleGetRoleDetailResponseBody:  # noqa: E501
        """getRoleDetail role  # noqa: E501

        role detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_get_role_detail(role_id, async_req=True)
        >>> result = thread.get()

        :param role_id: Role ID (required)
        :type role_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RoleGetRoleDetailResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.role_get_role_detail_with_http_info(role_id, **kwargs)  # noqa: E501

    @validate_arguments
    def role_get_role_detail_with_http_info(self, role_id : Annotated[StrictInt, Field(..., description="Role ID")], **kwargs):  # noqa: E501
        """getRoleDetail role  # noqa: E501

        role detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_get_role_detail_with_http_info(role_id, async_req=True)
        >>> result = thread.get()

        :param role_id: Role ID (required)
        :type role_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RoleGetRoleDetailResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'role_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_get_role_detail" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['role_id']:
            _path_params['roleID'] = _params['role_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "RoleGetRoleDetailResponseBody",
        }

        return self.api_client.call_api(
            '/v1/role/{roleID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def role_get_role_list(self, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page Number (default: 1)")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Limit (default: 20, max: 100)")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset")] = None, filter_cve_id : Annotated[Optional[StrictStr], Field(description="CveID filter")] = None, **kwargs) -> RoleGetRoleListResponseBody:  # noqa: E501
        """getRoleList role  # noqa: E501

        role list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_get_role_list(page, limit, offset, filter_cve_id, async_req=True)
        >>> result = thread.get()

        :param page: Page Number (default: 1)
        :type page: int
        :param limit: Limit (default: 20, max: 100)
        :type limit: int
        :param offset: Offset
        :type offset: int
        :param filter_cve_id: CveID filter
        :type filter_cve_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RoleGetRoleListResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.role_get_role_list_with_http_info(page, limit, offset, filter_cve_id, **kwargs)  # noqa: E501

    @validate_arguments
    def role_get_role_list_with_http_info(self, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page Number (default: 1)")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Limit (default: 20, max: 100)")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset")] = None, filter_cve_id : Annotated[Optional[StrictStr], Field(description="CveID filter")] = None, **kwargs):  # noqa: E501
        """getRoleList role  # noqa: E501

        role list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_get_role_list_with_http_info(page, limit, offset, filter_cve_id, async_req=True)
        >>> result = thread.get()

        :param page: Page Number (default: 1)
        :type page: int
        :param limit: Limit (default: 20, max: 100)
        :type limit: int
        :param offset: Offset
        :type offset: int
        :param filter_cve_id: CveID filter
        :type filter_cve_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RoleGetRoleListResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'limit',
            'offset',
            'filter_cve_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_get_role_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))
        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))
        if _params.get('filter_cve_id') is not None:  # noqa: E501
            _query_params.append(('filterCveID', _params['filter_cve_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "RoleGetRoleListResponseBody",
        }

        return self.api_client.call_api(
            '/v1/roles', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def role_update_role(self, role_id : Annotated[StrictInt, Field(..., description="Role ID")], update_role_request_body : RoleUpdateRoleRequestBody, **kwargs) -> RoleUpdateRoleResponseBody:  # noqa: E501
        """updateRole role  # noqa: E501

        update role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_update_role(role_id, update_role_request_body, async_req=True)
        >>> result = thread.get()

        :param role_id: Role ID (required)
        :type role_id: int
        :param update_role_request_body: (required)
        :type update_role_request_body: RoleUpdateRoleRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RoleUpdateRoleResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.role_update_role_with_http_info(role_id, update_role_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def role_update_role_with_http_info(self, role_id : Annotated[StrictInt, Field(..., description="Role ID")], update_role_request_body : RoleUpdateRoleRequestBody, **kwargs):  # noqa: E501
        """updateRole role  # noqa: E501

        update role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.role_update_role_with_http_info(role_id, update_role_request_body, async_req=True)
        >>> result = thread.get()

        :param role_id: Role ID (required)
        :type role_id: int
        :param update_role_request_body: (required)
        :type update_role_request_body: RoleUpdateRoleRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RoleUpdateRoleResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'role_id',
            'update_role_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method role_update_role" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['role_id']:
            _path_params['roleID'] = _params['role_id']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['update_role_request_body']:
            _body_params = _params['update_role_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/xml', 'application/gob']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "RoleUpdateRoleResponseBody",
        }

        return self.api_client.call_api(
            '/v1/role/{roleID}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
