# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conint

from typing import Optional

from openapiclient.models.pkg_cpe_add_cpe_request_body import PkgCpeAddCpeRequestBody
from openapiclient.models.pkg_cpe_add_cpe_response_body import PkgCpeAddCpeResponseBody
from openapiclient.models.pkg_cpe_delete_cpe_deprecated_request_body import PkgCpeDeleteCpeDeprecatedRequestBody
from openapiclient.models.pkg_cpe_get_cpe_detail_response_body import PkgCpeGetCpeDetailResponseBody
from openapiclient.models.pkg_cpe_get_pkg_cpe_list_response_body import PkgCpeGetPkgCpeListResponseBody
from openapiclient.models.pkg_cpe_get_pkg_detail_response_body import PkgCpeGetPkgDetailResponseBody

from openapiclient.api_client import ApiClient
from openapiclient.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PkgCpeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def pkg_cpe_add_cpe(self, add_cpe_request_body : PkgCpeAddCpeRequestBody, **kwargs) -> PkgCpeAddCpeResponseBody:  # noqa: E501
        """addCpe pkgCpe  # noqa: E501

        add cpe  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_add_cpe(add_cpe_request_body, async_req=True)
        >>> result = thread.get()

        :param add_cpe_request_body: (required)
        :type add_cpe_request_body: PkgCpeAddCpeRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PkgCpeAddCpeResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.pkg_cpe_add_cpe_with_http_info(add_cpe_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def pkg_cpe_add_cpe_with_http_info(self, add_cpe_request_body : PkgCpeAddCpeRequestBody, **kwargs):  # noqa: E501
        """addCpe pkgCpe  # noqa: E501

        add cpe  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_add_cpe_with_http_info(add_cpe_request_body, async_req=True)
        >>> result = thread.get()

        :param add_cpe_request_body: (required)
        :type add_cpe_request_body: PkgCpeAddCpeRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PkgCpeAddCpeResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'add_cpe_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pkg_cpe_add_cpe" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['add_cpe_request_body']:
            _body_params = _params['add_cpe_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/xml', 'application/gob']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "PkgCpeAddCpeResponseBody",
        }

        return self.api_client.call_api(
            '/v1/pkgCpe/cpe', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pkg_cpe_delete_cpe(self, cpe_id : Annotated[StrictInt, Field(..., description="cpe ID")], **kwargs) -> None:  # noqa: E501
        """deleteCpe pkgCpe  # noqa: E501

        delete cpe (urlにcpeIDを指定してください。cpeIDの指定のないアクセス方法は今後削除されます。)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_delete_cpe(cpe_id, async_req=True)
        >>> result = thread.get()

        :param cpe_id: cpe ID (required)
        :type cpe_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.pkg_cpe_delete_cpe_with_http_info(cpe_id, **kwargs)  # noqa: E501

    @validate_arguments
    def pkg_cpe_delete_cpe_with_http_info(self, cpe_id : Annotated[StrictInt, Field(..., description="cpe ID")], **kwargs):  # noqa: E501
        """deleteCpe pkgCpe  # noqa: E501

        delete cpe (urlにcpeIDを指定してください。cpeIDの指定のないアクセス方法は今後削除されます。)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_delete_cpe_with_http_info(cpe_id, async_req=True)
        >>> result = thread.get()

        :param cpe_id: cpe ID (required)
        :type cpe_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'cpe_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pkg_cpe_delete_cpe" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['cpe_id']:
            _path_params['cpeID'] = _params['cpe_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/pkgCpe/cpe/{cpeID}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pkg_cpe_delete_cpe_deprecated(self, delete_cpe_deprecated_request_body : PkgCpeDeleteCpeDeprecatedRequestBody, **kwargs) -> None:  # noqa: E501
        """deleteCpe_deprecated pkgCpe  # noqa: E501

        [deprecated] urlにcpeIDを指定して利用してください。cpeIDの指定のないこちらのアクセス方法は今後削除されます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_delete_cpe_deprecated(delete_cpe_deprecated_request_body, async_req=True)
        >>> result = thread.get()

        :param delete_cpe_deprecated_request_body: (required)
        :type delete_cpe_deprecated_request_body: PkgCpeDeleteCpeDeprecatedRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.pkg_cpe_delete_cpe_deprecated_with_http_info(delete_cpe_deprecated_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def pkg_cpe_delete_cpe_deprecated_with_http_info(self, delete_cpe_deprecated_request_body : PkgCpeDeleteCpeDeprecatedRequestBody, **kwargs):  # noqa: E501
        """deleteCpe_deprecated pkgCpe  # noqa: E501

        [deprecated] urlにcpeIDを指定して利用してください。cpeIDの指定のないこちらのアクセス方法は今後削除されます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_delete_cpe_deprecated_with_http_info(delete_cpe_deprecated_request_body, async_req=True)
        >>> result = thread.get()

        :param delete_cpe_deprecated_request_body: (required)
        :type delete_cpe_deprecated_request_body: PkgCpeDeleteCpeDeprecatedRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'delete_cpe_deprecated_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pkg_cpe_delete_cpe_deprecated" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['delete_cpe_deprecated_request_body']:
            _body_params = _params['delete_cpe_deprecated_request_body']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/xml', 'application/gob']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/pkgCpe/cpe', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pkg_cpe_get_cpe_detail(self, cpe_id : Annotated[StrictInt, Field(..., description="cpe ID")], **kwargs) -> PkgCpeGetCpeDetailResponseBody:  # noqa: E501
        """getCpeDetail pkgCpe  # noqa: E501

        cpe detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_get_cpe_detail(cpe_id, async_req=True)
        >>> result = thread.get()

        :param cpe_id: cpe ID (required)
        :type cpe_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PkgCpeGetCpeDetailResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.pkg_cpe_get_cpe_detail_with_http_info(cpe_id, **kwargs)  # noqa: E501

    @validate_arguments
    def pkg_cpe_get_cpe_detail_with_http_info(self, cpe_id : Annotated[StrictInt, Field(..., description="cpe ID")], **kwargs):  # noqa: E501
        """getCpeDetail pkgCpe  # noqa: E501

        cpe detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_get_cpe_detail_with_http_info(cpe_id, async_req=True)
        >>> result = thread.get()

        :param cpe_id: cpe ID (required)
        :type cpe_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PkgCpeGetCpeDetailResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'cpe_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pkg_cpe_get_cpe_detail" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['cpe_id']:
            _path_params['cpeID'] = _params['cpe_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "PkgCpeGetCpeDetailResponseBody",
        }

        return self.api_client.call_api(
            '/v1/pkgCpe/cpe/{cpeID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pkg_cpe_get_pkg_cpe_list(self, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page Number")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Limit")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset")] = None, filter_cve_id : Annotated[Optional[StrictStr], Field(description="CveID filter")] = None, filter_task_id : Annotated[Optional[conint(strict=True, ge=1)], Field(description="TaskID filter")] = None, filter_server_id : Annotated[Optional[conint(strict=True, ge=1)], Field(description="ServerID filter")] = None, filter_role_id : Annotated[Optional[conint(strict=True, ge=1)], Field(description="ServerRoleID filter")] = None, **kwargs) -> PkgCpeGetPkgCpeListResponseBody:  # noqa: E501
        """getPkgCpeList pkgCpe  # noqa: E501

        pkgCpe list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_get_pkg_cpe_list(page, limit, offset, filter_cve_id, filter_task_id, filter_server_id, filter_role_id, async_req=True)
        >>> result = thread.get()

        :param page: Page Number
        :type page: int
        :param limit: Limit
        :type limit: int
        :param offset: Offset
        :type offset: int
        :param filter_cve_id: CveID filter
        :type filter_cve_id: str
        :param filter_task_id: TaskID filter
        :type filter_task_id: int
        :param filter_server_id: ServerID filter
        :type filter_server_id: int
        :param filter_role_id: ServerRoleID filter
        :type filter_role_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PkgCpeGetPkgCpeListResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.pkg_cpe_get_pkg_cpe_list_with_http_info(page, limit, offset, filter_cve_id, filter_task_id, filter_server_id, filter_role_id, **kwargs)  # noqa: E501

    @validate_arguments
    def pkg_cpe_get_pkg_cpe_list_with_http_info(self, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="Page Number")] = None, limit : Annotated[Optional[conint(strict=True, le=1000, ge=1)], Field(description="Limit")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="Offset")] = None, filter_cve_id : Annotated[Optional[StrictStr], Field(description="CveID filter")] = None, filter_task_id : Annotated[Optional[conint(strict=True, ge=1)], Field(description="TaskID filter")] = None, filter_server_id : Annotated[Optional[conint(strict=True, ge=1)], Field(description="ServerID filter")] = None, filter_role_id : Annotated[Optional[conint(strict=True, ge=1)], Field(description="ServerRoleID filter")] = None, **kwargs):  # noqa: E501
        """getPkgCpeList pkgCpe  # noqa: E501

        pkgCpe list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_get_pkg_cpe_list_with_http_info(page, limit, offset, filter_cve_id, filter_task_id, filter_server_id, filter_role_id, async_req=True)
        >>> result = thread.get()

        :param page: Page Number
        :type page: int
        :param limit: Limit
        :type limit: int
        :param offset: Offset
        :type offset: int
        :param filter_cve_id: CveID filter
        :type filter_cve_id: str
        :param filter_task_id: TaskID filter
        :type filter_task_id: int
        :param filter_server_id: ServerID filter
        :type filter_server_id: int
        :param filter_role_id: ServerRoleID filter
        :type filter_role_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PkgCpeGetPkgCpeListResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'limit',
            'offset',
            'filter_cve_id',
            'filter_task_id',
            'filter_server_id',
            'filter_role_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pkg_cpe_get_pkg_cpe_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('filter_cve_id') is not None:  # noqa: E501
            _query_params.append(('filterCveID', _params['filter_cve_id']))

        if _params.get('filter_task_id') is not None:  # noqa: E501
            _query_params.append(('filterTaskID', _params['filter_task_id']))

        if _params.get('filter_server_id') is not None:  # noqa: E501
            _query_params.append(('filterServerID', _params['filter_server_id']))

        if _params.get('filter_role_id') is not None:  # noqa: E501
            _query_params.append(('filterRoleID', _params['filter_role_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "PkgCpeGetPkgCpeListResponseBody",
        }

        return self.api_client.call_api(
            '/v1/pkgCpes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def pkg_cpe_get_pkg_detail(self, pkg_id : Annotated[StrictInt, Field(..., description="PackageID")], **kwargs) -> PkgCpeGetPkgDetailResponseBody:  # noqa: E501
        """getPkgDetail pkgCpe  # noqa: E501

        pkg detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_get_pkg_detail(pkg_id, async_req=True)
        >>> result = thread.get()

        :param pkg_id: PackageID (required)
        :type pkg_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PkgCpeGetPkgDetailResponseBody
        """
        kwargs['_return_http_data_only'] = True
        return self.pkg_cpe_get_pkg_detail_with_http_info(pkg_id, **kwargs)  # noqa: E501

    @validate_arguments
    def pkg_cpe_get_pkg_detail_with_http_info(self, pkg_id : Annotated[StrictInt, Field(..., description="PackageID")], **kwargs):  # noqa: E501
        """getPkgDetail pkgCpe  # noqa: E501

        pkg detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pkg_cpe_get_pkg_detail_with_http_info(pkg_id, async_req=True)
        >>> result = thread.get()

        :param pkg_id: PackageID (required)
        :type pkg_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PkgCpeGetPkgDetailResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pkg_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pkg_cpe_get_pkg_detail" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['pkg_id']:
            _path_params['pkgID'] = _params['pkg_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'application/gob'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api_key_header_Authorization']  # noqa: E501

        _response_types_map = {
            '200': "PkgCpeGetPkgDetailResponseBody",
        }

        return self.api_client.call_api(
            '/v1/pkgCpe/pkg/{pkgID}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
