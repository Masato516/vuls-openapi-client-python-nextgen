# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapiclient.models.cvss_response_body import CvssResponseBody
from openapiclient.models.cwe_response_body import CweResponseBody
from openapiclient.models.env_metric_v2_response_body import EnvMetricV2ResponseBody
from openapiclient.models.env_metric_v3_response_body import EnvMetricV3ResponseBody
from openapiclient.models.sec_metric_response_body import SecMetricResponseBody
from openapiclient.models.tmp_metric_response_body import TmpMetricResponseBody

class CveGetCveDetailResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    created_at: datetime = Field(..., alias="createdAt", description="created time")
    cve_id: StrictStr = Field(..., alias="cveID", description="Cve ID string of cve")
    cvss: CvssResponseBody = ...
    cwes: List[CweResponseBody] = Field(..., description="cwes of cve")
    env_metric_v2s: List[EnvMetricV2ResponseBody] = Field(..., alias="envMetricV2s", description="envMetricV2 of cve")
    env_metric_v3s: List[EnvMetricV3ResponseBody] = Field(..., alias="envMetricV3s", description="envMetricV3 of cve")
    exploit_level: Optional[StrictStr] = Field(None, alias="exploitLevel", description="ExploitLevel of cve")
    has_exploit: Optional[StrictBool] = Field(None, alias="hasExploit", description="exploit exist")
    has_mitigation: Optional[StrictBool] = Field(None, alias="hasMitigation", description="mitigation exist")
    references: Dict[str, StrictStr] = Field(..., description="references of cve")
    sec_metrics: List[SecMetricResponseBody] = Field(..., alias="secMetrics", description="secMetric of cve")
    tmp_metric_v2: TmpMetricResponseBody = Field(..., alias="tmpMetricV2")
    tmp_metric_v3: TmpMetricResponseBody = Field(..., alias="tmpMetricV3")
    updated_at: datetime = Field(..., alias="updatedAt", description="updated time")
    __properties = ["createdAt", "cveID", "cvss", "cwes", "envMetricV2s", "envMetricV3s", "exploitLevel", "hasExploit", "hasMitigation", "references", "secMetrics", "tmpMetricV2", "tmpMetricV3", "updatedAt"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CveGetCveDetailResponseBody:
        """Create an instance of CveGetCveDetailResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cvss
        if self.cvss:
            _dict['cvss'] = self.cvss.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cwes (list)
        _items = []
        if self.cwes:
            for _item in self.cwes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cwes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in env_metric_v2s (list)
        _items = []
        if self.env_metric_v2s:
            for _item in self.env_metric_v2s:
                if _item:
                    _items.append(_item.to_dict())
            _dict['envMetricV2s'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in env_metric_v3s (list)
        _items = []
        if self.env_metric_v3s:
            for _item in self.env_metric_v3s:
                if _item:
                    _items.append(_item.to_dict())
            _dict['envMetricV3s'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sec_metrics (list)
        _items = []
        if self.sec_metrics:
            for _item in self.sec_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of tmp_metric_v2
        if self.tmp_metric_v2:
            _dict['tmpMetricV2'] = self.tmp_metric_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tmp_metric_v3
        if self.tmp_metric_v3:
            _dict['tmpMetricV3'] = self.tmp_metric_v3.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CveGetCveDetailResponseBody:
        """Create an instance of CveGetCveDetailResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CveGetCveDetailResponseBody.parse_obj(obj)

        _obj = CveGetCveDetailResponseBody.parse_obj({
            "created_at": obj.get("createdAt"),
            "cve_id": obj.get("cveID"),
            "cvss": CvssResponseBody.from_dict(obj.get("cvss")) if obj.get("cvss") is not None else None,
            "cwes": [CweResponseBody.from_dict(_item) for _item in obj.get("cwes")] if obj.get("cwes") is not None else None,
            "env_metric_v2s": [EnvMetricV2ResponseBody.from_dict(_item) for _item in obj.get("envMetricV2s")] if obj.get("envMetricV2s") is not None else None,
            "env_metric_v3s": [EnvMetricV3ResponseBody.from_dict(_item) for _item in obj.get("envMetricV3s")] if obj.get("envMetricV3s") is not None else None,
            "exploit_level": obj.get("exploitLevel"),
            "has_exploit": obj.get("hasExploit"),
            "has_mitigation": obj.get("hasMitigation"),
            "references": obj.get("references"),
            "sec_metrics": [SecMetricResponseBody.from_dict(_item) for _item in obj.get("secMetrics")] if obj.get("secMetrics") is not None else None,
            "tmp_metric_v2": TmpMetricResponseBody.from_dict(obj.get("tmpMetricV2")) if obj.get("tmpMetricV2") is not None else None,
            "tmp_metric_v3": TmpMetricResponseBody.from_dict(obj.get("tmpMetricV3")) if obj.get("tmpMetricV3") is not None else None,
            "updated_at": obj.get("updatedAt")
        })
        return _obj

