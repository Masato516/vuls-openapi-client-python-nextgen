# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class DetectionToolResponseBody(BaseModel):
    """
    DetectionToolResponseBody
    """
    name: StrictStr = Field(..., description="Detection Tool Name")
    patch_applied_at: Optional[datetime] = Field(None, alias="patchAppliedAt", description="PatchAppliedAt")
    __properties = ["name", "patchAppliedAt"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DetectionToolResponseBody:
        """Create an instance of DetectionToolResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DetectionToolResponseBody:
        """Create an instance of DetectionToolResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DetectionToolResponseBody.parse_obj(obj)

        _obj = DetectionToolResponseBody.parse_obj({
            "name": obj.get("name"),
            "patch_applied_at": obj.get("patchAppliedAt")
        })
        return _obj

