# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapiclient.models.sec_metric_response_body import SecMetricResponseBody

class RoleListResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    all_task_count: Optional[StrictInt] = Field(None, alias="allTaskCount", description="AllTaskCount of server role")
    created_at: datetime = Field(..., alias="createdAt", description="created time of server role")
    id: StrictInt = Field(..., description="ID of server role")
    is_default: StrictBool = Field(..., alias="isDefault", description="isDefault of server role")
    name: StrictStr = Field(..., description="Name of server role")
    new_task_count: Optional[StrictInt] = Field(None, alias="newTaskCount", description="NewTaskCount of server role")
    sec_metric: Optional[SecMetricResponseBody] = Field(None, alias="secMetric")
    server_count: Optional[StrictInt] = Field(None, alias="serverCount", description="Server Count of server role")
    updated_at: datetime = Field(..., alias="updatedAt", description="updated time of server role")
    __properties = ["allTaskCount", "createdAt", "id", "isDefault", "name", "newTaskCount", "secMetric", "serverCount", "updatedAt"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RoleListResponseBody:
        """Create an instance of RoleListResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sec_metric
        if self.sec_metric:
            _dict['secMetric'] = self.sec_metric.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RoleListResponseBody:
        """Create an instance of RoleListResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return RoleListResponseBody.parse_obj(obj)

        _obj = RoleListResponseBody.parse_obj({
            "all_task_count": obj.get("allTaskCount"),
            "created_at": obj.get("createdAt"),
            "id": obj.get("id"),
            "is_default": obj.get("isDefault"),
            "name": obj.get("name"),
            "new_task_count": obj.get("newTaskCount"),
            "sec_metric": SecMetricResponseBody.from_dict(obj.get("secMetric")) if obj.get("secMetric") is not None else None,
            "server_count": obj.get("serverCount"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

