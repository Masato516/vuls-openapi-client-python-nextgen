# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapiclient.models.cve_child_response_body import CveChildResponseBody
from openapiclient.models.detection_method_response_body import DetectionMethodResponseBody
from openapiclient.models.detection_tool_response_body import DetectionToolResponseBody
from openapiclient.models.group_response_body import GroupResponseBody
from openapiclient.models.server_child_response_body import ServerChildResponseBody
from openapiclient.models.vuln_summary_response_body import VulnSummaryResponseBody

class TaskListResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    is_running_process: Optional[StrictBool] = Field(None, alias="IsRunningProcess", description="プロセスが実行中かどうか")
    advisory_ids: List[StrictStr] = Field(..., alias="advisoryIDs", description="advisoryIDs of cve")
    applying_patch_on: Optional[datetime] = Field(None, alias="applyingPatchOn", description="ApplyingPatchOn of task")
    cloud_one_detect_only: Optional[StrictBool] = Field(None, alias="cloudOneDetectOnly", description="CloudOneでのみ検知した脆弱性かどうか")
    cloud_one_status: Optional[StrictStr] = Field(None, alias="cloudOneStatus", description="status of cloudone")
    created_at: datetime = Field(..., alias="createdAt", description="created time of task")
    cve: Optional[CveChildResponseBody] = None
    cve_id: StrictStr = Field(..., alias="cveID", description="CVE ID of task")
    deadline_on: Optional[date] = Field(None, alias="deadlineOn", description="deadline of task")
    detection_methods: List[DetectionMethodResponseBody] = Field(..., alias="detectionMethods", description="DetectionMethods of task")
    detection_tools: List[DetectionToolResponseBody] = Field(..., alias="detectionTools", description="DetectionTools of task")
    exploit_level: Optional[StrictStr] = Field(None, alias="exploitLevel", description="exploit level of cve")
    group: Optional[GroupResponseBody] = None
    has_danger: StrictBool = Field(..., alias="hasDanger", description="Dangerフラグが付与されているかどうか")
    has_exploit: Optional[StrictBool] = Field(None, alias="hasExploit", description="hasExploit of cve")
    has_mitigation: Optional[StrictBool] = Field(None, alias="hasMitigation", description="hasMitigation of cve")
    id: StrictInt = Field(..., description="ID of task")
    ignore: StrictBool = Field(..., description="Ignore of task")
    ignore_expired_at: Optional[datetime] = Field(None, alias="ignoreExpiredAt", description="the date of ignore expiration")
    ignore_until: Optional[StrictStr] = Field(None, alias="ignoreUntil", description="Ignore until of task")
    is_important: StrictBool = Field(..., alias="isImportant", description="重要フィルターに該当するかどうか")
    listening_ports: List[StrictStr] = Field(..., alias="listeningPorts", description="listened ports")
    main_user_id: Optional[StrictInt] = Field(None, alias="mainUserID", description="MainUserID of task")
    main_user_name: Optional[StrictStr] = Field(None, alias="mainUserName", description="MainUserName of task")
    newed_at: datetime = Field(..., alias="newedAt", description="the time when task status became 'new'")
    org_alert_tags: Optional[List[StrictStr]] = Field(None, alias="orgAlertTags", description="SpecialAlertTags of task")
    os_family: StrictStr = Field(..., alias="osFamily", description="OS Name of server")
    os_version: StrictStr = Field(..., alias="osVersion", description="OS Version of server")
    pkg_cpe_names: Optional[List[StrictStr]] = Field(None, alias="pkgCpeNames", description="Package And CPE Names of task")
    pkg_fixed_status: Optional[StrictStr] = Field(None, alias="pkgFixedStatus", description="fix status of package")
    pkg_fixed_status_names: Optional[StrictStr] = Field(None, alias="pkgFixedStatusNames", description="fix status name of package")
    priority: StrictStr = Field(..., description="Priority of task")
    server: Optional[ServerChildResponseBody] = None
    server_id: StrictInt = Field(..., alias="serverID", description="ServerID of task")
    server_name: StrictStr = Field(..., alias="serverName", description="ServerName of task")
    server_tags: Optional[List[StrictStr]] = Field(None, alias="serverTags", description="ServerTags of task")
    server_uuid: StrictStr = Field(..., alias="serverUuid", description="ServerUUID of task")
    ssvc_priority: Optional[StrictStr] = Field(None, alias="ssvcPriority", description="SSVCPriority")
    status: StrictStr = Field(..., description="Status of task")
    sub_user_id: Optional[StrictInt] = Field(None, alias="subUserID", description="SubUserID of task")
    sub_user_name: Optional[StrictStr] = Field(None, alias="subUserName", description="SubUserName of task")
    updatable_pkg_cpe_names: Optional[List[StrictStr]] = Field(None, alias="updatablePkgCpeNames", description="Updatable Package And CPE Names of task")
    updated_at: datetime = Field(..., alias="updatedAt", description="updated time of task")
    vuln_info: Optional[VulnSummaryResponseBody] = Field(None, alias="vulnInfo")
    __properties = ["IsRunningProcess", "advisoryIDs", "applyingPatchOn", "cloudOneDetectOnly", "cloudOneStatus", "createdAt", "cve", "cveID", "deadlineOn", "detectionMethods", "detectionTools", "exploitLevel", "group", "hasDanger", "hasExploit", "hasMitigation", "id", "ignore", "ignoreExpiredAt", "ignoreUntil", "isImportant", "listeningPorts", "mainUserID", "mainUserName", "newedAt", "orgAlertTags", "osFamily", "osVersion", "pkgCpeNames", "pkgFixedStatus", "pkgFixedStatusNames", "priority", "server", "serverID", "serverName", "serverTags", "serverUuid", "ssvcPriority", "status", "subUserID", "subUserName", "updatablePkgCpeNames", "updatedAt", "vulnInfo"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaskListResponseBody:
        """Create an instance of TaskListResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cve
        if self.cve:
            _dict['cve'] = self.cve.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in detection_methods (list)
        _items = []
        if self.detection_methods:
            for _item in self.detection_methods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['detectionMethods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in detection_tools (list)
        _items = []
        if self.detection_tools:
            for _item in self.detection_tools:
                if _item:
                    _items.append(_item.to_dict())
            _dict['detectionTools'] = _items
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server:
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vuln_info
        if self.vuln_info:
            _dict['vulnInfo'] = self.vuln_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaskListResponseBody:
        """Create an instance of TaskListResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TaskListResponseBody.parse_obj(obj)

        _obj = TaskListResponseBody.parse_obj({
            "is_running_process": obj.get("IsRunningProcess"),
            "advisory_ids": obj.get("advisoryIDs"),
            "applying_patch_on": obj.get("applyingPatchOn"),
            "cloud_one_detect_only": obj.get("cloudOneDetectOnly"),
            "cloud_one_status": obj.get("cloudOneStatus"),
            "created_at": obj.get("createdAt"),
            "cve": CveChildResponseBody.from_dict(obj.get("cve")) if obj.get("cve") is not None else None,
            "cve_id": obj.get("cveID"),
            "deadline_on": obj.get("deadlineOn"),
            "detection_methods": [DetectionMethodResponseBody.from_dict(_item) for _item in obj.get("detectionMethods")] if obj.get("detectionMethods") is not None else None,
            "detection_tools": [DetectionToolResponseBody.from_dict(_item) for _item in obj.get("detectionTools")] if obj.get("detectionTools") is not None else None,
            "exploit_level": obj.get("exploitLevel"),
            "group": GroupResponseBody.from_dict(obj.get("group")) if obj.get("group") is not None else None,
            "has_danger": obj.get("hasDanger"),
            "has_exploit": obj.get("hasExploit"),
            "has_mitigation": obj.get("hasMitigation"),
            "id": obj.get("id"),
            "ignore": obj.get("ignore"),
            "ignore_expired_at": obj.get("ignoreExpiredAt"),
            "ignore_until": obj.get("ignoreUntil"),
            "is_important": obj.get("isImportant"),
            "listening_ports": obj.get("listeningPorts"),
            "main_user_id": obj.get("mainUserID"),
            "main_user_name": obj.get("mainUserName"),
            "newed_at": obj.get("newedAt"),
            "org_alert_tags": obj.get("orgAlertTags"),
            "os_family": obj.get("osFamily"),
            "os_version": obj.get("osVersion"),
            "pkg_cpe_names": obj.get("pkgCpeNames"),
            "pkg_fixed_status": obj.get("pkgFixedStatus"),
            "pkg_fixed_status_names": obj.get("pkgFixedStatusNames"),
            "priority": obj.get("priority"),
            "server": ServerChildResponseBody.from_dict(obj.get("server")) if obj.get("server") is not None else None,
            "server_id": obj.get("serverID"),
            "server_name": obj.get("serverName"),
            "server_tags": obj.get("serverTags"),
            "server_uuid": obj.get("serverUuid"),
            "ssvc_priority": obj.get("ssvcPriority"),
            "status": obj.get("status"),
            "sub_user_id": obj.get("subUserID"),
            "sub_user_name": obj.get("subUserName"),
            "updatable_pkg_cpe_names": obj.get("updatablePkgCpeNames"),
            "updated_at": obj.get("updatedAt"),
            "vuln_info": VulnSummaryResponseBody.from_dict(obj.get("vulnInfo")) if obj.get("vulnInfo") is not None else None
        })
        return _obj

