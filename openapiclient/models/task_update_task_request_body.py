# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class TaskUpdateTaskRequestBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    applying_patch_on: Optional[date] = Field(None, alias="applyingPatchOn", description="applyingPatchOn (YYYY-MM-DD) UTC")
    main_user_id: Optional[StrictInt] = Field(None, alias="mainUserID", description="mainUserID of task")
    priority: Optional[StrictStr] = Field(None, description="Priority of task")
    status: Optional[StrictStr] = Field(None, description="Status of task")
    sub_user_id: Optional[StrictInt] = Field(None, alias="subUserID", description="subUserID of task")
    __properties = ["applyingPatchOn", "mainUserID", "priority", "status", "subUserID"]

    @validator('priority')
    def priority_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('none', 'high', 'medium', 'low'):
            raise ValueError("must validate the enum values ('none', 'high', 'medium', 'low')")
        return v

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('new', 'investigating', 'ongoing', 'defer', 'not_affected', 'risk_accepted', 'workaround'):
            raise ValueError("must validate the enum values ('new', 'investigating', 'ongoing', 'defer', 'not_affected', 'risk_accepted', 'workaround')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TaskUpdateTaskRequestBody:
        """Create an instance of TaskUpdateTaskRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TaskUpdateTaskRequestBody:
        """Create an instance of TaskUpdateTaskRequestBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TaskUpdateTaskRequestBody.parse_obj(obj)

        _obj = TaskUpdateTaskRequestBody.parse_obj({
            "applying_patch_on": obj.get("applyingPatchOn"),
            "main_user_id": obj.get("mainUserID"),
            "priority": obj.get("priority"),
            "status": obj.get("status"),
            "sub_user_id": obj.get("subUserID")
        })
        return _obj

