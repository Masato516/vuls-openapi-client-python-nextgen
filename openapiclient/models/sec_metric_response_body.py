# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictInt, StrictStr

class SecMetricResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    ar: StrictStr = Field(..., description="AR of secMetric")
    cr: StrictStr = Field(..., description="CR of secMetric")
    created_at: datetime = Field(..., alias="createdAt", description="created time")
    ir: StrictStr = Field(..., description="IR of secMetric")
    role_id: StrictInt = Field(..., alias="roleID", description="ServerRoleID of secMetric")
    role_name: StrictStr = Field(..., alias="roleName", description="ServerRoleName of secMetric")
    updated_at: datetime = Field(..., alias="updatedAt", description="updated time")
    __properties = ["ar", "cr", "createdAt", "ir", "roleID", "roleName", "updatedAt"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SecMetricResponseBody:
        """Create an instance of SecMetricResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SecMetricResponseBody:
        """Create an instance of SecMetricResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return SecMetricResponseBody.parse_obj(obj)

        _obj = SecMetricResponseBody.parse_obj({
            "ar": obj.get("ar"),
            "cr": obj.get("cr"),
            "created_at": obj.get("createdAt"),
            "ir": obj.get("ir"),
            "role_id": obj.get("roleID"),
            "role_name": obj.get("roleName"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

