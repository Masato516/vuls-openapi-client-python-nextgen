# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class ChildTaskResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    applying_patch_on: Optional[datetime] = Field(None, alias="applyingPatchOn", description="ApplyingPatchOn of task")
    created_at: datetime = Field(..., alias="createdAt", description="created time of task")
    cve_id: StrictStr = Field(..., alias="cveID", description="CVE ID of task")
    id: StrictInt = Field(..., description="ID of task")
    ignore: StrictBool = Field(..., description="Ignore of task")
    ignore_until: Optional[StrictStr] = Field(None, alias="ignoreUntil", description="Ignore until of task")
    main_user_id: Optional[StrictInt] = Field(None, alias="mainUserID", description="MainUserID of task")
    main_user_name: Optional[StrictStr] = Field(None, alias="mainUserName", description="MainUserName of task")
    priority: StrictStr = Field(..., description="Priority of task")
    server_id: StrictInt = Field(..., alias="serverID", description="ServerID of task")
    status: StrictStr = Field(..., description="Status of task")
    sub_user_id: Optional[StrictInt] = Field(None, alias="subUserID", description="SubUserID of task")
    sub_user_name: Optional[StrictStr] = Field(None, alias="subUserName", description="SubUserName of task")
    updated_at: datetime = Field(..., alias="updatedAt", description="updated time of task")
    __properties = ["applyingPatchOn", "createdAt", "cveID", "id", "ignore", "ignoreUntil", "mainUserID", "mainUserName", "priority", "serverID", "status", "subUserID", "subUserName", "updatedAt"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChildTaskResponseBody:
        """Create an instance of ChildTaskResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChildTaskResponseBody:
        """Create an instance of ChildTaskResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ChildTaskResponseBody.parse_obj(obj)

        _obj = ChildTaskResponseBody.parse_obj({
            "applying_patch_on": obj.get("applyingPatchOn"),
            "created_at": obj.get("createdAt"),
            "cve_id": obj.get("cveID"),
            "id": obj.get("id"),
            "ignore": obj.get("ignore"),
            "ignore_until": obj.get("ignoreUntil"),
            "main_user_id": obj.get("mainUserID"),
            "main_user_name": obj.get("mainUserName"),
            "priority": obj.get("priority"),
            "server_id": obj.get("serverID"),
            "status": obj.get("status"),
            "sub_user_id": obj.get("subUserID"),
            "sub_user_name": obj.get("subUserName"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

