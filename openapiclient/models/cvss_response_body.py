# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapiclient.models.cvss_response_body_max_cvss_v2 import CvssResponseBodyMaxCvssV2
from openapiclient.models.cvss_response_body_vuln_info import CvssResponseBodyVulnInfo

class CvssResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    cve_id: Optional[StrictStr] = Field(None, alias="cveID")
    max_cvss_v2: Optional[CvssResponseBodyMaxCvssV2] = Field(None, alias="maxCvssV2")
    max_cvss_v3: Optional[CvssResponseBodyMaxCvssV2] = Field(None, alias="maxCvssV3")
    vuln_info: Optional[CvssResponseBodyVulnInfo] = Field(None, alias="vulnInfo")
    __properties = ["cveID", "maxCvssV2", "maxCvssV3", "vulnInfo"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CvssResponseBody:
        """Create an instance of CvssResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of max_cvss_v2
        if self.max_cvss_v2:
            _dict['maxCvssV2'] = self.max_cvss_v2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max_cvss_v3
        if self.max_cvss_v3:
            _dict['maxCvssV3'] = self.max_cvss_v3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vuln_info
        if self.vuln_info:
            _dict['vulnInfo'] = self.vuln_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CvssResponseBody:
        """Create an instance of CvssResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CvssResponseBody.parse_obj(obj)

        _obj = CvssResponseBody.parse_obj({
            "cve_id": obj.get("cveID"),
            "max_cvss_v2": CvssResponseBodyMaxCvssV2.from_dict(obj.get("maxCvssV2")) if obj.get("maxCvssV2") is not None else None,
            "max_cvss_v3": CvssResponseBodyMaxCvssV2.from_dict(obj.get("maxCvssV3")) if obj.get("maxCvssV3") is not None else None,
            "vuln_info": CvssResponseBodyVulnInfo.from_dict(obj.get("vulnInfo")) if obj.get("vulnInfo") is not None else None
        })
        return _obj

