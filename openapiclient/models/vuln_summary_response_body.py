# coding: utf-8

"""
    Future Vuls Public API

    Future Vuls Public API  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapiclient.models.cwe_response_body import CweResponseBody

class VulnSummaryResponseBody(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    alert_level: Optional[StrictStr] = Field(None, alias="alertLevel", description="警戒レベル")
    cwe: List[CweResponseBody] = Field(..., description="cwe")
    has_alert: StrictBool = Field(..., alias="hasAlert", description="警戒情報があるかどうか")
    is_owasp_top_ten2017: StrictBool = Field(..., alias="isOwaspTopTen2017", description="2017 owasp top tenに記載されているかどうか")
    title: StrictStr = Field(..., description="title")
    __properties = ["alertLevel", "cwe", "hasAlert", "isOwaspTopTen2017", "title"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VulnSummaryResponseBody:
        """Create an instance of VulnSummaryResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in cwe (list)
        _items = []
        if self.cwe:
            for _item in self.cwe:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cwe'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VulnSummaryResponseBody:
        """Create an instance of VulnSummaryResponseBody from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return VulnSummaryResponseBody.parse_obj(obj)

        _obj = VulnSummaryResponseBody.parse_obj({
            "alert_level": obj.get("alertLevel"),
            "cwe": [CweResponseBody.from_dict(_item) for _item in obj.get("cwe")] if obj.get("cwe") is not None else None,
            "has_alert": obj.get("hasAlert"),
            "is_owasp_top_ten2017": obj.get("isOwaspTopTen2017"),
            "title": obj.get("title")
        })
        return _obj

